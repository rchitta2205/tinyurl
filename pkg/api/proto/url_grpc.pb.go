// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/url.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinyUrlServiceClient is the client API for TinyUrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyUrlServiceClient interface {
	Create(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	Fetch(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
}

type tinyUrlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyUrlServiceClient(cc grpc.ClientConnInterface) TinyUrlServiceClient {
	return &tinyUrlServiceClient{cc}
}

func (c *tinyUrlServiceClient) Create(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/TinyUrlService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlServiceClient) Fetch(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/TinyUrlService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyUrlServiceServer is the server API for TinyUrlService service.
// All implementations should embed UnimplementedTinyUrlServiceServer
// for forward compatibility
type TinyUrlServiceServer interface {
	Create(context.Context, *UrlRequest) (*UrlResponse, error)
	Fetch(context.Context, *UrlRequest) (*UrlResponse, error)
}

// UnimplementedTinyUrlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTinyUrlServiceServer struct {
}

func (UnimplementedTinyUrlServiceServer) Create(context.Context, *UrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTinyUrlServiceServer) Fetch(context.Context, *UrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}

// UnsafeTinyUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyUrlServiceServer will
// result in compilation errors.
type UnsafeTinyUrlServiceServer interface {
	mustEmbedUnimplementedTinyUrlServiceServer()
}

func RegisterTinyUrlServiceServer(s grpc.ServiceRegistrar, srv TinyUrlServiceServer) {
	s.RegisterService(&TinyUrlService_ServiceDesc, srv)
}

func _TinyUrlService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TinyUrlService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceServer).Create(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrlService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TinyUrlService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceServer).Fetch(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyUrlService_ServiceDesc is the grpc.ServiceDesc for TinyUrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyUrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TinyUrlService",
	HandlerType: (*TinyUrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TinyUrlService_Create_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _TinyUrlService_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url.proto",
}
